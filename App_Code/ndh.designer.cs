#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DataSource")]
public partial class ndhDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void Inserthomenew(homenew instance);
  partial void Updatehomenew(homenew instance);
  partial void Deletehomenew(homenew instance);
  partial void Insertcontact(contact instance);
  partial void Updatecontact(contact instance);
  partial void Deletecontact(contact instance);
  #endregion
	
	public ndhDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DataSourceConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public ndhDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public ndhDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public ndhDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public ndhDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<homenew> homenews
	{
		get
		{
			return this.GetTable<homenew>();
		}
	}
	
	public System.Data.Linq.Table<mapMatrix> mapMatrixes
	{
		get
		{
			return this.GetTable<mapMatrix>();
		}
	}
	
	public System.Data.Linq.Table<contact> contacts
	{
		get
		{
			return this.GetTable<contact>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.homenews")]
public partial class homenew : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _news_id;
	
	private string _title;
	
	private string _main_text;
	
	private System.Data.Linq.Binary _date;
	
	private System.Nullable<System.DateTime> _event_date;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onnews_idChanging(int value);
    partial void Onnews_idChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void Onmain_textChanging(string value);
    partial void Onmain_textChanged();
    partial void OndateChanging(System.Data.Linq.Binary value);
    partial void OndateChanged();
    partial void Onevent_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onevent_dateChanged();
    #endregion
	
	public homenew()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_news_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
	public int news_id
	{
		get
		{
			return this._news_id;
		}
		set
		{
			if ((this._news_id != value))
			{
				this.Onnews_idChanging(value);
				this.SendPropertyChanging();
				this._news_id = value;
				this.SendPropertyChanged("news_id");
				this.Onnews_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string title
	{
		get
		{
			return this._title;
		}
		set
		{
			if ((this._title != value))
			{
				this.OntitleChanging(value);
				this.SendPropertyChanging();
				this._title = value;
				this.SendPropertyChanged("title");
				this.OntitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_main_text", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string main_text
	{
		get
		{
			return this._main_text;
		}
		set
		{
			if ((this._main_text != value))
			{
				this.Onmain_textChanging(value);
				this.SendPropertyChanging();
				this._main_text = value;
				this.SendPropertyChanged("main_text");
				this.Onmain_textChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary date
	{
		get
		{
			return this._date;
		}
		set
		{
			if ((this._date != value))
			{
				this.OndateChanging(value);
				this.SendPropertyChanging();
				this._date = value;
				this.SendPropertyChanged("date");
				this.OndateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_event_date", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
	public System.Nullable<System.DateTime> event_date
	{
		get
		{
			return this._event_date;
		}
		set
		{
			if ((this._event_date != value))
			{
				this.Onevent_dateChanging(value);
				this.SendPropertyChanging();
				this._event_date = value;
				this.SendPropertyChanged("event_date");
				this.Onevent_dateChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.mapMatrix")]
public partial class mapMatrix
{
	
	private string _origin;
	
	public mapMatrix()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_origin", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
	public string origin
	{
		get
		{
			return this._origin;
		}
		set
		{
			if ((this._origin != value))
			{
				this._origin = value;
			}
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.contact")]
public partial class contact : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _id;
	
	private string _contactName;
	
	private string _contactEmail;
	
	private string _contactReason;
	
	private string _contactMessage;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncontactNameChanging(string value);
    partial void OncontactNameChanged();
    partial void OncontactEmailChanging(string value);
    partial void OncontactEmailChanged();
    partial void OncontactReasonChanging(string value);
    partial void OncontactReasonChanged();
    partial void OncontactMessageChanging(string value);
    partial void OncontactMessageChanged();
    #endregion
	
	public contact()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int id
	{
		get
		{
			return this._id;
		}
		set
		{
			if ((this._id != value))
			{
				this.OnidChanging(value);
				this.SendPropertyChanging();
				this._id = value;
				this.SendPropertyChanged("id");
				this.OnidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contactName", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
	public string contactName
	{
		get
		{
			return this._contactName;
		}
		set
		{
			if ((this._contactName != value))
			{
				this.OncontactNameChanging(value);
				this.SendPropertyChanging();
				this._contactName = value;
				this.SendPropertyChanged("contactName");
				this.OncontactNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contactEmail", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
	public string contactEmail
	{
		get
		{
			return this._contactEmail;
		}
		set
		{
			if ((this._contactEmail != value))
			{
				this.OncontactEmailChanging(value);
				this.SendPropertyChanging();
				this._contactEmail = value;
				this.SendPropertyChanged("contactEmail");
				this.OncontactEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contactReason", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
	public string contactReason
	{
		get
		{
			return this._contactReason;
		}
		set
		{
			if ((this._contactReason != value))
			{
				this.OncontactReasonChanging(value);
				this.SendPropertyChanging();
				this._contactReason = value;
				this.SendPropertyChanged("contactReason");
				this.OncontactReasonChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contactMessage", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
	public string contactMessage
	{
		get
		{
			return this._contactMessage;
		}
		set
		{
			if ((this._contactMessage != value))
			{
				this.OncontactMessageChanging(value);
				this.SendPropertyChanging();
				this._contactMessage = value;
				this.SendPropertyChanged("contactMessage");
				this.OncontactMessageChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
